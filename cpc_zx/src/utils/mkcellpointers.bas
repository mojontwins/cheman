' mkcellpointers.bas v0.1 20190312
' Generates a pointers array for sprite cells

' fbc mkcellpointers.bas mtparser.bas

#include "mtparser.bi"

Sub usage
	Print "usage:"
	Print
	Print "$ mkcellpointers.exe input.spt output.h array_name [target]"
	Print
	Print "Supported targets: cpc (default)"
End Sub

Dim As String inputFn, outputFn, label, target
Dim As Integer fIn, fOut
Dim As String pointerBase
Dim As String inputLine
Dim As String tokens (10)
Dim As Integer coords (10), i
Dim As Integer currentOffset, firstline

inputFn = Command (1)
outputFn = Command (2)
label = Command (3)
target = Command (4): If target = "" Then target = "cpc"

pointerBase = "ss_main"
currentOffset = 0

fIn = FreeFile
Open inputFn For Input As #fIn

fOut = FreeFile
Open outputFn For Output As #fOut

Print #fOut, "// Static cell pointer definition"
Print #fOut, "// Generated by mkcellpointers v0.1 20190312"
Print #fOut, "// Target: " & target & ", block size = ";
Select Case target
	case "cpc": Print #fOut, "16 bytes"
	case "zx": Print #fOut, "16 bytes, but add 1 block per dimension"
End Select
Print #fOut, ""
Print #fOut, "extern const unsigned char *" & label & " [0];"
Print #fOut, ""
Print #fOut, "#asm"
Print #fOut, "	._" & label

firstline = -1

While Not Eof (fIn)

	Line Input #fIn, inputLine
	inputLine = Trim (inputLine)
	parseTokenizeString inputLine, tokens (), ",", "#"

	If (tokens (0)) = "pointer" Then
		pointerBase = tokens (1)
		currentOffset = 0
	ElseIf tokens (0) = "comment" Then
		If Not firstline Then Print #fOut, ""
		Print #fOut, "	// " & Trim (Right (inputLine, Len (inputLine) - 7))
		firstline = 0
	ElseIf tokens (0) >= "0" And tokens (0) <= "9" Then
		parseCoordinatesString inputLine, coords ()

		For i = 1 To coords (0)
			' Write entry
			Print #fOut, "	defw ";
			Print #fOut, "_" & pointerBase & " + 0x" & Lcase (Hex (currentOffset, 4)) 
			firstline = 0

			' Increment offset
			Select Case target
				Case "cpc":
					currentOffset = currentOffset + coords (1) * coords (2) * 16
				Case "zx"
					currentOffset = currentOffset + (coords (1) + 1) * (coords (2) + 1) * 16
			End Select
		Next i
		
	End If

Wend

Print #fOut, "#endasm"
Print #fOut, ""

Close #fOut
Close #fIn
